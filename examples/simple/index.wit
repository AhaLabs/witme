// This is a generated file by witgen (https://github.com/bnjjj/witgen), please do not edit yourself, you can generate a new one thanks to cargo witgen generate command. (cargo-witgen v0.12.0) 


type string-alias = string

variant my-enum {
    unit,
    tuple-variant(tuple<string, s32>),
}


///  Example of using generating an enum, e.i. a variant with unit fields
enum color {
    red,
    green,
    blue,
}


test-simple: function(array: list<u8>) -> string

type nft-contract-metadata = string

record init-args {
    owner-id: string,
    metadata: nft-contract-metadata
}

test-array: function(other: list<u8>, number: u8, othernum: s32) -> (string, u64)

test-vec: function(other: list<u8>, number: u8, othernum: s32) -> (string, u64)

test-option: function(other: list<u8>, number: u8, othernum: s32) -> option<tuple<string, u64>>

test-result: function(other: list<u8>, number: u8, othernum: s32) -> expected<tuple<string, u64>, string>

///  Here is a doc example to generate in wit file
record test-bis {
    coucou: string,
    btes: list<u8>
}

///  Documentation over struct
///  in multi-line
type test-tuple = tuple<u64, string>

record test-struct {
    ///  Doc comment over inner field in struct
    inner: string
}

///  Documentation over enum
variant test-enum {
    ///  Doc comment over Unit variant in enum
    unit,
    number(u64),
    ///  Doc comment over String variant
    string-variant(string),
}


///  Documentation over enum
variant complicated-enum {
    ///  Doc comment over Unit variant in enum
    hash-fields(complicated-enum-hash-fields),
    number(complicated-enum-number),
    ///  Doc comment over String variant in enum
    string-variant(complicated-enum-string-variant),
}

///  Doc comment over Unit variant in enum
record complicated-enum-hash-fields {
    name: string,
    kind: test-enum
}
record complicated-enum-number {
    size: u32
}
///  Doc comment over String variant in enum
record complicated-enum-string-variant {
    ///  Can document fields
    inner: string
}

test-tuple-fn: function(other: list<u8>, test-struct: test-struct, other-enum: test-enum) -> (string, s64)

record has-hash-map {
    map: list<tuple<string,test-struct>>
}

use-string-alias: function(s: string-alias) -> string-alias

has-mutable: function(s: string) -> string
// This is a generated file by witgen (https://github.com/bnjjj/witgen), please do not edit yourself, you can generate a new one thanks to cargo witgen generate command. (witme v0.2.0) 

///  StorageUsage is used to count the amount of storage used by a contract.
type storage-usage = u64

///  Balance is a type for storing amounts of tokens, specified in yoctoNEAR.
type balance = u128

///  Represents the amount of NEAR tokens in "gas units" which are used to fund transactions.
type gas = u64

///  base64 string.
type base64-vec-u8 = string

///  Raw type for duration in nanoseconds
type duration = u64

///  @minLength 2
///  @maxLength 64
///  @pattern ^(([a-z\d]+[-_])*[a-z\d]+\.)*([a-z\d]+[-_])*[a-z\d]+$
type account-id = string

///  String representation of a u128-bit integer
///  @pattern ^[0-9]+$
type u128 = string

///  Public key in a binary format with base58 string serialization with human-readable curve.
///  The key types currently supported are `secp256k1` and `ed25519`.
/// 
///  Ed25519 public keys accepted are 32 bytes and secp256k1 keys are the uncompressed 64 format.
type public-key = string

///  Raw type for timestamp in nanoseconds
type timestamp = u64

